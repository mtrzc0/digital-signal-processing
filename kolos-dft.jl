# dft, suma amplitud
function rozwiazanie(;
    fp::Int = 682,
    x::Vector{ComplexF64} = ComplexF64[-0.35 + 0.22im, -0.68 - 1.13im, 0.69 + 0.08im, 0.24 - 0.56im, 0.03 + 0.22im, -0.08 + 0.33im, -0.0 + 0.71im, -0.15 + 0.87im, 0.74 - 0.19im, 0.75 + 1.81im, 0.89 - 0.66im, 0.15 - 0.36im, 0.33 - 0.75im, 0.22 - 0.59im, 0.71 - 0.62im, -0.09 + 0.63im, -0.1 + 0.49im, -0.16 - 0.3im, 0.25 + 1.87im, -0.17 + 0.11im, -1.15 - 0.24im, 0.55 + 0.76im, -0.26 + 0.18im, -0.55 - 0.18im, 1.34 - 0.02im, -0.56 - 0.26im, 1.23 + 0.46im, 0.17 + 0.34im, -0.7 - 0.65im, -0.91 - 0.81im, -0.29 - 0.3im],
    f::Vector{Int} = [-176, -154, 66, 110, 176, 198, 242],
)
    N=length(x)
    sum=0
    for fi in f
        X=0
        for n in 1:N-1
            X+=x[n+1]*cispi(-2*fi/fp*n)
        end
        sum+=abs(X/N)
    end
    return sum
end
# rozwiazanie()
     
function rozwiazanie(;
    fp::Int = 987,
    x::Vector{ComplexF64} = ComplexF64[0.8 - 0.62im, 0.68 + 0.19im, -0.06 + 0.05im, -0.23 + 0.4im, 0.17 - 0.23im, 0.43 + 0.15im, -0.93 - 0.33im, 0.81 + 0.06im, -1.37 - 0.23im, -0.78 + 0.4im, 0.13 - 0.62im, 1.91 - 0.61im, -0.63 + 0.37im, -1.69 - 0.31im, 0.05 - 0.87im, 0.87 + 0.07im, -0.62 + 0.44im, -0.78 - 0.88im, 0.51 - 0.92im, 1.11 + 0.63im, 0.73 - 0.0im, -0.39 + 0.8im, -1.32 - 0.67im, 0.43 + 0.0im, 0.1 - 0.51im, 1.2 + 0.01im, -0.17 - 0.22im, 0.15 + 0.41im, -0.17 + 0.47im, -0.67 + 0.81im, -0.13 - 0.06im, -0.23 + 0.31im, -0.01 + 0.57im, 1.42 - 0.27im, 0.74 - 0.14im, -0.1 + 1.28im, 0.59 - 0.48im, -0.42 - 1.0im, 0.04 - 0.1im, 0.09 + 0.78im, 1.38 - 0.14im, -0.61 + 0.15im, -1.36 - 0.02im, 0.5 - 1.12im, 0.65 - 0.75im, 0.63 - 0.87im, 0.32 + 0.89im],
    f::Vector{Int} = [-441, -420, -63, -42, -21, 210, 462],
)
    N=length(x)
    sum=0
    for fi in f
        X=0
        for n in 1:N-1
            X+=x[n+1]*cispi(-2*(fi/fp)*n)
        end
        sum += angle(X/N)
    end
    return sum
end
# rozwiazanie()

function rozwiazanie(;
    fp::Int = 893,
    x::Vector{ComplexF64} = ComplexF64[-0.05 + 0.15im, -0.51 - 0.06im, 0.46 + 0.01im, 0.9 + 0.31im, -0.56 + 0.38im, 0.87 + 0.61im, 0.53 + 0.4im, -1.63 + 1.23im, 0.31 + 0.77im, 1.43 + 0.06im, 0.43 + 0.66im, -1.15 + 0.41im, -0.47 - 0.39im, -1.86 - 0.44im, 1.38 - 0.15im, 0.18 + 0.08im, 0.1 - 1.8im, -0.9 - 0.57im, -0.04 + 1.66im, -0.97 + 1.17im, -0.51 - 1.03im, 0.15 - 0.8im, -0.09 - 0.5im, -0.9 + 1.25im, -0.2 + 1.12im, -0.24 + 1.15im, 1.38 + 0.03im, 0.53 - 0.76im, 0.46 + 0.58im, 0.59 + 0.89im, -1.09 + 0.51im, 0.08 + 0.89im, -0.39 - 0.49im, 0.53 + 0.71im, -0.59 - 0.26im, -0.42 - 0.3im, 0.14 - 0.52im, 0.85 - 0.05im, -0.21 - 0.58im, -0.1 + 0.32im, 0.13 - 1.0im, 1.26 + 0.05im, 0.01 + 0.26im, -0.2 - 1.52im, -1.42 + 0.38im, -0.21 - 1.1im, 0.35 - 0.54im],
    f::Vector{Int} = [133, 171, 323, 418],
)
    N=length(x)
    sum=0
    for fi in f
        X=0
        for n in 1:N-1
            X+=x[n+1]*cispi(-2*fi/fp*n)
        end
        sum+=angle(X/N)
    end
    return sum
end
# rozwiazanie()

function rozwiazanie(;
    fp::Int = 900,
    x::Vector{ComplexF64} = ComplexF64[-0.01 - 0.72im, 0.14 + 0.64im, -1.06 - 0.48im, -0.07 - 0.6im, -0.1 + 0.19im, 0.25 + 0.47im, -0.15 - 0.93im, -0.09 - 0.12im, 0.41 + 0.05im, -0.39 + 0.22im, -0.35 + 0.01im, -0.26 + 0.35im, 0.73 + 1.67im, 0.38 + 0.26im, -0.68 - 0.55im, 0.46 + 0.63im, -0.26 + 0.46im, 0.02 - 1.01im, -0.24 + 0.16im, 0.58 + 0.47im, -0.97 - 0.5im, -1.19 + 1.58im, -0.75 + 0.09im, -0.85 + 0.2im, 0.24 - 1.03im, 0.27 - 0.07im, -0.35 - 1.02im, -0.79 - 0.04im, 0.99 - 0.37im, 0.17 + 0.21im, 0.0 + 0.56im, 0.79 + 0.11im, 0.08 + 0.83im, 0.31 - 0.51im, -0.98 - 0.36im, 0.59 + 0.19im, -0.5 - 1.24im, -0.24 - 0.67im, 0.56 - 0.12im, -0.25 - 0.14im, -0.79 - 1.29im, 0.26 - 0.46im, -0.41 - 0.36im, 1.35 - 0.69im, -0.25 + 0.21im],
    f::Vector{Int} = [-420, 60, 160, 180, 220, 280, 420],
)
    N=length(x)
    sum=0
    for fi in f
        X=0
        for n in 0:N-1
            X += x[n+1]*cispi(-2*(fi/fp)*n)
        end
        sum += angle(X/N)
    end
    return sum
end
# rozwiazanie()

function rozwiazanie(
    fp::Int = 1034,
    x::Vector{ComplexF64} = ComplexF64[0.51 - 0.53im, 0.34 - 0.26im, 0.62 + 1.19im, 0.78 + 0.06im, -0.16 - 0.61im, 1.34 + 0.16im, -0.39 + 1.33im, 0.21 - 1.07im, 0.94 + 0.28im, -0.18 - 1.2im, -1.01 + 0.77im, -1.18 + 0.52im, 0.61 + 0.98im, 0.44 - 0.18im, 0.49 + 0.37im, -0.95 + 1.0im, 0.21 + 0.8im, 0.65 - 0.25im, 0.58 + 0.43im, 0.24 + 0.62im, 1.0 + 1.47im, 0.18 - 1.02im, 0.09 - 0.47im, -0.29 + 0.92im, -0.74 - 0.94im, 0.27 + 0.49im, -0.55 + 0.28im, -0.17 - 0.12im, -0.72 + 1.18im, -0.13 - 0.08im, 0.86 - 0.04im, 0.41 + 1.11im, -1.3 - 0.14im, -0.64 + 0.06im, -0.58 - 0.18im, 0.35 - 0.6im, 1.09 + 0.37im, 0.24 - 0.42im, 0.36 - 1.7im, 0.45 + 0.1im, -0.39 - 0.27im, -0.7 - 0.47im, 0.78 + 0.44im, -0.31 + 1.1im, -0.36 + 0.16im, -0.65 + 0.69im, -0.53 - 1.53im],
    f::Vector{Int} = [-374, -22, 264, 308, 352, 506],
)
    N=length(x)
    s=0
    for fi in f
        X=0
        for n in 0:N-1
            X+=x[n+1]*cispi(-2*fi/fp*n)
        end
        s+=abs(X/N)
    end
    return s
end
# rozwiazanie()

function rozwiazanie(;
    fp::Int = 987,
    x::Vector{ComplexF64} = ComplexF64[0.8 - 0.62im, 0.68 + 0.19im, -0.06 + 0.05im, -0.23 + 0.4im, 0.17 - 0.23im, 0.43 + 0.15im, -0.93 - 0.33im, 0.81 + 0.06im, -1.37 - 0.23im, -0.78 + 0.4im, 0.13 - 0.62im, 1.91 - 0.61im, -0.63 + 0.37im, -1.69 - 0.31im, 0.05 - 0.87im, 0.87 + 0.07im, -0.62 + 0.44im, -0.78 - 0.88im, 0.51 - 0.92im, 1.11 + 0.63im, 0.73 - 0.0im, -0.39 + 0.8im, -1.32 - 0.67im, 0.43 + 0.0im, 0.1 - 0.51im, 1.2 + 0.01im, -0.17 - 0.22im, 0.15 + 0.41im, -0.17 + 0.47im, -0.67 + 0.81im, -0.13 - 0.06im, -0.23 + 0.31im, -0.01 + 0.57im, 1.42 - 0.27im, 0.74 - 0.14im, -0.1 + 1.28im, 0.59 - 0.48im, -0.42 - 1.0im, 0.04 - 0.1im, 0.09 + 0.78im, 1.38 - 0.14im, -0.61 + 0.15im, -1.36 - 0.02im, 0.5 - 1.12im, 0.65 - 0.75im, 0.63 - 0.87im, 0.32 + 0.89im],
    f::Vector{Int} = [-441, -420, -63, -42, -21, 210, 462],
)

    N=length(x)
    s=0
    for fi in f
        X=0
        for n in 0:N-1
            X += x[n+1]*cispi(-2*(fi/fp)*n)
        end
        s += angle(X/N)
    end
    return s
end
# rozwiazanie()
          
function rozwiazanie(;
    fp::Int = 572,
    x::Vector{ComplexF64} = ComplexF64[-0.29 - 1.49im, 0.89 - 0.61im, -0.44 + 0.09im, -0.06 + 0.79im, -0.31 - 0.94im, -1.8 + 0.46im, -1.77 - 0.6im, -0.19 - 0.2im, -0.66 + 0.55im, 0.75 + 0.67im, 0.93 - 0.33im, 0.18 - 0.59im, -0.14 - 0.33im, -1.45 + 0.12im, -0.24 + 1.02im, 0.11 - 0.62im, -0.17 + 0.46im, -0.28 + 1.28im, 0.86 + 0.39im, 0.59 - 0.52im, -0.72 + 0.53im, -0.48 + 0.68im, -0.04 - 0.76im, -0.41 + 0.22im, 0.93 + 0.23im, 0.42 - 0.03im],
    f::Vector{Int} = [-220, -198, -154, -110, -44, 132, 220, 242],
)
    N=length(x)
    s=0
    for fi in f
        X=0
        for n in 0:N-1
            X+=x[n+1]*cispi(-2*fi/fp*n)
        end
        s+=abs(X/N)
    end
    return s
end
# # rozwiazanie()
     
function rozwiazanie(;
    fp::Int = 940,
    x::Vector{ComplexF64} = ComplexF64[-0.65 - 0.67im, -0.29 - 1.34im, -1.28 + 0.2im, -0.44 + 0.15im, 1.0 + 0.05im, -0.66 - 0.1im, 0.08 + 0.24im, -1.17 + 0.43im, 0.05 + 0.85im, -0.5 - 0.46im, -0.24 + 0.16im, 0.76 - 0.29im, 0.35 + 0.09im, -1.85 + 1.1im, -0.51 - 0.12im, -0.29 + 1.02im, -0.31 + 1.76im, -0.55 - 0.15im, 0.1 - 0.7im, -0.0 + 0.52im, 1.2 - 1.01im, 0.45 + 0.71im, 1.73 + 0.9im, -0.54 + 1.56im, -0.22 + 0.4im, -0.16 - 0.44im, -0.78 + 0.24im, 0.52 + 1.06im, -0.8 - 0.85im, -0.2 - 1.5im, 0.81 - 0.95im, 0.91 + 0.35im, -0.18 - 0.57im, -0.66 + 0.81im, 1.14 + 0.02im, -0.65 + 1.58im, 0.06 - 0.47im, -0.46 + 0.35im, -0.48 - 0.18im, 0.5 - 0.68im, 0.02 - 1.54im, -1.47 - 1.26im, -0.37 - 1.14im, 0.08 - 0.32im, -1.19 - 1.9im, -0.04 - 0.37im, -1.39 - 1.23im],
    f::Vector{Int} = [-380, -360, -260, -60, -20, 180, 360],
)
    N=length(x)
    s=0
    for fi in f
        X=0
        for n in 1:N-1
            X+=x[n+1]*cispi(-2*fi/fp*n)
        end
        s+=abs(X/N)
    end
    return s
end
# rozwiazanie()

function rozwiazanie(;
    fp::Int = 704,
    x::Vector{ComplexF64} = ComplexF64[-0.52 - 1.0im, -0.01 - 1.27im, 1.02 - 1.2im, -0.86 - 0.45im, -0.43 + 0.46im, -0.88 + 1.0im, 0.64 - 0.0im, -0.42 - 0.51im, 0.29 - 0.44im, -0.47 + 1.16im, 0.37 - 0.74im, 0.39 + 0.73im, 1.18 + 0.76im, -1.63 + 0.87im, 0.43 + 0.09im, -0.57 + 0.37im, -0.06 - 0.55im, 1.81 + 0.21im, -0.17 + 1.65im, -0.07 - 1.05im, 0.26 - 0.37im, -0.22 - 1.52im, 0.4 - 0.46im, 1.53 + 0.01im, -2.06 + 0.09im, -0.78 + 0.57im, -0.3 - 0.33im, -0.1 + 0.39im, 0.66 + 0.69im, 0.39 + 0.05im, 0.06 - 1.1im, 0.41 + 0.44im],
    f::Vector{Int} = [-264, -110, 242, 286, 330],
)
    N=length(x)
    s=0
    for fi in f
        X=0
        for n in 0:N-1
            X+=x[n+1]*cispi(-2*fi/fp*n)
        end
        s+=abs(X/N)
    end
    return s
end
# rozwiazanie()

function rozwiazanie(;
    fp::Int = 820,
    x::Vector{ComplexF64} = ComplexF64[0.56 + 0.4im, 1.2 - 0.29im, -0.18 - 0.94im, 0.1 + 0.63im, -1.19 + 0.8im, -0.38 + 0.21im, -0.3 + 0.73im, 0.66 + 0.39im, 0.94 - 1.17im, 0.62 - 0.39im, -0.62 + 0.91im, -0.53 + 0.23im, -0.91 + 0.71im, 0.32 - 0.54im, 1.18 + 1.0im, 1.27 - 0.06im, -0.2 + 1.0im, -0.68 - 0.83im, 0.49 - 0.81im, 0.58 + 0.54im, 0.64 + 1.46im, -0.58 + 0.15im, 0.07 + 0.31im, -0.71 + 0.34im, 0.54 + 0.58im, -1.47 + 0.51im, 0.15 + 1.0im, -0.01 - 0.58im, 0.63 + 0.19im, -0.28 - 1.99im, 0.24 - 1.48im, 0.52 - 0.8im, 0.81 + 0.33im, 0.14 - 0.42im, 0.31 - 0.59im, -0.0 + 0.2im, 0.69 + 0.21im, -0.92 - 0.44im, -0.49 + 0.69im, 0.66 + 0.2im, -1.31 - 0.55im],
    f::Vector{Int} = [-320, -280, -200, -40],
)
    N=length(x)
    return sum([abs.(sum([x[n+1]*cispi(-2*fi/fp*n) for n in 0:N-1])/N) for fi in f])
end
# rozwiazanie()

function rozwiazanie(;
    fp::Int = 858,
    x::Vector{ComplexF64} = ComplexF64[-0.39 - 0.57im, 0.22 + 0.36im, 0.97 - 0.31im, -0.2 + 0.28im, -0.8 - 1.34im, 0.8 + 0.26im, 0.63 + 0.21im, -0.4 + 0.71im, 0.93 + 0.04im, 0.02 - 0.47im, 0.07 + 1.91im, 0.14 + 0.23im, 0.56 + 0.79im, 0.73 + 0.13im, 0.35 - 0.81im, -0.12 - 0.53im, 1.15 - 0.43im, 0.03 - 1.24im, 0.87 + 0.3im, -0.06 - 0.34im, 0.04 + 0.5im, 0.35 + 1.21im, 0.37 - 0.73im, 0.05 + 0.54im, 0.03 + 0.78im, 0.15 + 0.02im, -0.17 - 0.17im, 0.32 + 0.49im, -0.01 + 0.63im, 1.27 - 0.59im, -1.07 - 0.34im, 2.2 + 0.5im, 0.26 - 0.67im, 0.27 + 0.44im, -0.82 + 0.64im, -0.62 - 0.96im, -0.03 - 0.25im, -1.35 + 0.14im, 0.16 + 0.3im],
    f::Vector{Int} = [-308, -286, -242, -154, -66, 242, 330],
)
    N=length(x)
    return sum([angle.(sum([x[n+1]*cispi(-2*fi/fp*n) for n in 0:N-1]))/N for fi in f])
end
# rozwiazanie()

function rozwiazanie(;
    fp::Int = 494,
    x::Vector{ComplexF64} = ComplexF64[0.45 - 1.75im, 0.47 + 0.96im, 0.14 + 0.2im, -0.33 - 1.36im, 0.13 + 0.39im, 1.02 + 0.53im, 0.38 + 0.4im, -0.43 - 0.32im, 0.74 + 1.19im, 0.05 + 0.89im, 0.14 - 0.44im, 0.13 - 0.96im, 1.63 + 2.29im, 0.59 + 0.91im, -1.53 + 0.06im, 0.36 - 0.3im, -0.6 - 0.03im, -0.04 + 0.13im, -0.42 + 0.29im, -0.08 + 0.26im, 1.32 - 0.83im, -0.96 - 0.77im, 0.41 + 0.18im, 0.73 - 0.19im, 0.3 - 0.77im, -0.44 + 1.46im],
    f::Vector{Int} = [-171, -152, -76, 0, 57, 114],
)
    N=length(x)
    return sum([abs.(sum([x[n+1]*cispi(-2*fi/fp*n) for n in 0:N-1])/N) for fi in f])
end
# rozwiazanie()

function rozwiazanie(;
    fp::Int = 551,
    x::Vector{ComplexF64} = ComplexF64[1.0 - 0.82im, -0.95 - 0.0im, -0.22 + 0.58im, -0.25 - 1.63im, -0.42 + 0.58im, 0.14 + 0.53im, 0.33 + 0.06im, -0.56 - 0.34im, 0.23 - 0.8im, 0.72 - 0.78im, 1.22 + 0.19im, 0.8 + 1.06im, -1.18 - 0.64im, -0.06 + 0.63im, 0.79 + 0.07im, 1.74 + 0.62im, -0.12 - 0.36im, 0.18 - 0.45im, 0.27 + 0.61im, -0.25 + 0.25im, -1.45 - 1.02im, 0.19 - 1.13im, 1.23 - 0.3im, -1.0 + 0.14im, -1.74 + 0.47im, 0.31 + 0.08im, 0.72 + 0.66im, -1.15 + 1.2im, -0.79 + 0.32im],
    f::Vector{Int} = [-76, -38, 114, 228],
)
    N=length(x)
    return sum([angle.(sum([x[n+1]*cispi(-2*fi/fp*n) for n in 0:N-1])/N) for fi in f])
end
rozwiazanie()
